USUARIO TESTE B2W STARWARS
https://b2w.gupy.io/candidates/applications/3910183/instructions

email: nathaliadiaspestana@gmail.com
senha: Deusefiel1*

--

###################
WORKSPACE
###################

F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\index.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\actions\actionTypes.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\actions\index.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\pages\index.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\reducers\setaReducerState.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\reducers\index.js
F:\kiu\Projetos\ReactJS\b2w\b2w_starwars\src\store\index.js

--

PROCEDIMENTOS

NA PASTA DO PROJETO (b2w)
- create-react-app b2w_starwars

--

INSTALANDO O SASS
https://facebook.github.io/create-react-app/docs/adding-a-sass-stylesheet
- npm install node-sass --save
- ALTERAR O NOME DOS ARQUIVOS .css PARA .scss

--

INSTALANDO O REDUX
- npm i -D redux react-redux

--

CRIAR O pages/index.js E COLOCAR OS CÓDIGOS DO App.js

FICARÁ
src/App.js

/* import React from 'react';
import logo from './logo.svg';
import './App.scss';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
} */
import App from './pages';
export default App;

--

src/pages/index.js

import React from 'react';
import logo from '../logo.svg';
import '../App.scss';

function App() {
    return (
        <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                    Edit <code>src/App.js</code> and save to reload.
        </p>
                <a
                    className="App-link"
                    href="https://reactjs.org"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Learn React
        </a>
            </header>
        </div>
    );
}
export default App;






************************

#############
ACTIONS
#############

/**

ACTION TYPES

src/actions/actionTypes.js

Os types, que são as Action Types, recomendo separar num arquivo próprio para importarmos apenas as constantes, desta forma, num arquivo:

*/

export const ACTIONS = {
    CLICK_UPDATE_VALUE: "CLICK_UPDATE_VALUE",
    SET_PLANET: "SET_PLANET"
};


###

/**

src/actions/index.js

Aqui a função é a Action Creator, e o que ela retorna, que é o objeto, é a Action. Ao ser disparada, ela comunicará ao Reducer que o type é CLICK_UPDATE_VALUE, além do valor newValue: value que deverá ser atualizado na Store. Novamente aqui, caso prefira usar o mesmo nome para chave e valor, ficará de sua escolha.

*/

import { ACTIONS } from './actionTypes';

export const atualizarValorInput = paramValorDoInput => ({
    type: ACTIONS.CLICK_UPDATE_VALUE,
    novoValorInput: paramValorDoInput
})

export const atualizarValorPlanet = value => ({
    type: ACTIONS.SET_PLANET,
    novoValorPlaneta: value
})

#############
STORE
#############
/**

src/store/index.js

Aqui criamos a Store e dizemos quais são os seus respectivos Reducers. Vamos criá-los adiante.

*/


import { createStore } from 'redux';
import { Reducers } from '../reducers';
export const Store = createStore(Reducers);


#############
REDUCERS
#############

/**

COMBINE REDUCER

src/reducers/index.js

Como a Store é a Única Fonte de Verdade, teremos que combinar todos os reducers da aplicação e enviar à Store. Crie uma pasta na raíz da pasta /src chamada reducers. Dentro dela, crie um arquivo index.js com o conteúdo:

*/

import { setaReducerStateInput, setaReducerStatePlanet } from "./setaReducerState";
// import { OtherReducer } from "./otherReducer";
import { combineReducers } from "redux";

export const Reducers = combineReducers({
    setaReducerStateInputStore: setaReducerStateInput,
    // otherState: otherReducer
    setaReducerStatePlanetStore: setaReducerStatePlanet
});

###

/**

REDUCER 1

src/reducers/setaReducerState.js

Caso sua aplicação possua vários reducers, você pode combiná-los para enviá-los à Store da seguinte forma, usando o método combineReducers.

A chave do objeto é o nome na qual o estado será acessado pela aplicação, enquanto o seu valor é o Reducer, função pura que filtra os dados e que criaremos adiante. Ficará de sua escolha caso prefira usar o mesmo nome para a chave e valor.

Aqui definimos qual será a chave do Reducer na Store quando quisermos acessar o seu estado, além de podermos combinar vários Reducers para serem conectados à Store.

Crie o arquivo setaReducerState.js na mesma pasta com o seguinte conteúdo:

*/

import { ACTIONS } from "../actions/actionTypes";

const initialStateInput = {
    novoValorInput: "",
    // novoValorInput: "ATUALIZADO VIA REDUCER"
}

const initialStatePlanet = {
    novoValorPlaneta: {
        climate: "",
        created: "",
        diameter: "",
        edited: "",
        films: [],
        gravity: "",
        name: "",
        orbital_period: "",
        population: "",
        residents: [],
        rotation_period: "",
        surface_water: "",
        terrain: "",
        url: ""
    }
    // novoValorInput: "ATUALIZADO VIA REDUCER"
}

export const setaReducerStateInput = (state = initialStateInput, action) => {
    switch (action.type) {
        case ACTIONS.CLICK_UPDATE_VALUE:
            return {
                ...state,
                novoValorInput: action.novoValorInput
            };
        default:
            return state;
    }
};

export const setaReducerStatePlanet = (state = initialStatePlanet, action) => {
    switch (action.type) {
        case ACTIONS.SET_PLANET:
            // alert(ACTIONS.SET_PLANET);
            /* console.log("a");
            console.log(action.novoValorPlaneta)
            console.log("b"); */
            return {
                ...state,
                novoValorPlaneta: action.novoValorPlaneta
            };
        default:
            return state;
    }
};

/**

Este será o nosso Reducer que será acionado pela Action caso o type dela seja CLICK_UPDATE_VALUE, caso contrário manterá o estado atual.

IMPORTANTE: esta função deverá ser pura, ou seja, retornar um novo objeto, pois lembrando, a Store é imutável. Conseguimos preservar o restante do estado usando o ...state, que recupera o estado anterior e passa para o novo objeto.

*/




#############
PROVIDER
#############

/**

ALTERAR
src/index.js


Crie o Provider para conectar a aplicação à Store

No arquivo src/index.js faça algumas alterações, ele deverá ficar assim (negritei as mudanças)

*/

#########
ANTES
#########

import React from 'react';
import ReactDOM from 'react-dom';
import './index.scss';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(<App />, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();


#########
DEPOIS
#########

import React from 'react';
import ReactDOM from 'react-dom';
import './index.scss';
import App from './App';
import * as serviceWorker from './serviceWorker';

// INSERIDO
import { Provider } from "react-redux";
import { Store } from "./store";
// import registerServiceWorker from "./registerServiceWorker";

ReactDOM.render(
    <Provider store={Store}>
        <App />
    </Provider>
, document.getElementById('root'));

serviceWorker.unregister();
// registerServiceWorker();

/**

Aqui é onde o estado da Store se conectará com toda a aplicação, através do Provider Pattern, que possibilita que a Store seja acessível a todos os componentes abaixo dele. Veja mais sobre em:

https://medium.com/@oieduardorabelo/padrões-em-react-provider-pattern-b520c37ed733

*/




#############
CONEXAO ESTADO A STORE
#############

/**

ALTERAR
src/App.js QUE JA ESTA EM src/pages/index.js

Para fazer a conexão com a Store, agora devemos atualizar o nosso componente src/App.js:

*/

#########
ANTES
#########

// import React from 'react';
import React, { Component } from 'react';
import logo from '../logo.svg';
import '../App.scss';

function App() {
    return (
        <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                    Edit <code>src/App.js</code> and save to reload.
        </p>
                <a
                    className="App-link"
                    href="https://reactjs.org"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Learn React
        </a>
            </header>
        </div>
    );
}
export default App;


#########
DEPOIS
#########

import React from 'react';
import logo from '../logo.svg';
import '../App.scss';

// INSERIDO
import { connect } from "react-redux";

// function App() {
class App extends Component {
    render() {
        const { newValue } = this.props;
        
        return (
            <div className="App">
                {/* <header className="App-header">
                    <img src={logo} className="App-logo" alt="logo" />
                    <p>
                        Edit <code>src/App.js</code> and save to reload.
            </p>
                    <a
                        className="App-link"
                        href="https://reactjs.org"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        Learn React
            </a>
                </header> */}
                
                <input type="text" />
                <button>
                    Click me!
                </button>

                <h1>{newValue}</h1>

            </div>
        );
    }
}

// export default App;
const mapStateToProps = store => ({
    newValue: store.clickState.newValue
})

export default connect(mapStateToProps)(App);


/**

O método mapStateToProps transforma um trecho do estado da Store em uma prop utilizável pelo componente, com o nome newValue.

Ao acessarmos a chave clickState, que foi definida no arquivo src/reducers/index.js na linha 5:

clickState: setaReducerState

… podemos extrair a sua chave newValue, que foi definida no arquivo src/reducers/setaReducerState.js na linha 12:

newValue: action.newValue

--

No momento de exportar o componente, precisamos fazer a sua conexão através do método connect do React Redux, passando o método mapStateToProps como parâmetro e o componente atual como parâmetro na função retornada. Este padrão no React se chama High Order Component.

Ao fazermos esta conexão, podemos usar o newValue como prop no componente:

...
const { newValue } = this.props;
...
...
<h1>{newValue}</h1>
...

--

Para sabermos se está funcionando, basta trocarmos o initialState no arquivo src/reducers/setaReducerState.js na linha 4 e conferirmos se reflete na página:

const initialState = {
  newValue: 'Atualizado via Redux!'
};


*/




#############
DISPARANDO UM EVENTO PARA EVOLUIR A STORE
#############

/**

ALTERAR src/pages/index.js

Agora vamos criar a funcionalidade de evoluir o estado da Store a partir do preenchimento do input e o clique no botão Click me!. O código deverá novamente ser atualizado conforme a seguir:

*/

#########
ANTES
#########

// import React from 'react';
import React, { Component } from 'react';
import logo from '../logo.svg';
import '../App.scss';

// INSERIDO
import { connect } from "react-redux";

// function App() {
class App extends Component {
    render() {
        const { newValue } = this.props;
        
        return (
            <div className="App">
                {/* <header className="App-header">
                    <img src={logo} className="App-logo" alt="logo" />
                    <p>
                        Edit <code>src/App.js</code> and save to reload.
            </p>
                    <a
                        className="App-link"
                        href="https://reactjs.org"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        Learn React
            </a>
                </header> */}
                
                <input type="text" />
                <button>
                    Click me!
                </button>

                <h1>{newValue}</h1>

            </div>
        );
    }
}

// export default App;
const mapStateToProps = store => ({
    newValue: store.clickState.newValue
})

export default connect(mapStateToProps)(App);


#########
DEPOIS
#########

// import React from 'react';
import React, { Component } from 'react';
import logo from '../logo.svg';
import '../App.scss';

// INSERIDO
import { connect } from "react-redux";

// INSERIDO 2
import { bindActionCreators } from 'redux';
import { atualizarValorInput, atualizarValorPlanet } from '../actions';

import axios from "axios";

import Planet from "./Planet";

// function App() {
class App extends Component {
    state = {
        inputValue: ''
    }
    
    inputChange = event => {
        this.setState({
            inputValue: event.target.value
        })
    }

    getPlanet() {
        let idPlanet = Math.floor(Math.random() * 61) + 1;
        axios
        .post(`https://swapi.co/api/planets/${idPlanet}`)
        .then(res =>  {
            console.log(this.props.novoValorPlanetaProps);
            this.props.atualizarValorPlanetProps(res.data);
        })
        .catch(res => console.log("Ocorreu um erro, tente novamente mais tarde: " + res));
    }

    componentDidMount(){
        this.getPlanet();
    }

    render() {
        // const { novoValorInput } = this.props;
        const {
            atualizarValorInputProps,
            novoValorInputProps
        } = this.props;
        const { inputValue } = this.state;
        
        
        return (
            <div className="App">
                {/* <header className="App-header">
                    <img src={logo} className="App-logo" alt="logo" />
                    <p>
                        Edit <code>src/App.js</code> and save to reload.
            </p>
                    <a
                        className="App-link"
                        href="https://reactjs.org"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        Learn React
            </a>
                </header> */}
                
                {/* <input type="text" />
                <button>
                    Click me!
                </button> */}

                {/* <input
                    onChange={this.inputChange}
                    type='text'
                    value={inputValue}
                />
                <button onClick={() => atualizarValorInputProps(inputValue)}>
                    Click me!
                </button>

                <h1>{novoValorInputProps}</h1> */}

                <Planet
                    planetProps = {this.props.novoValorPlanetaProps}
                    atualizarValorPlaneta = {this.getPlanet.bind(this)}
                />

            </div>
        );
    }
}

// export default App;
const mapStateToProps = store => ({
    novoValorInputProps: store.setaReducerStateInputStore.novoValorInput,
    novoValorPlanetaProps: store.setaReducerStatePlanetStore.novoValorPlaneta
}/* , () => {
    console.log("a");
    console.log(store.setaReducerStatePlanetStore.novoValorPlaneta);
    console.log("b");    
} */)

// INSERIDO 2
const mapDispatchToProps = dispatch => bindActionCreators({ 
    // atualizarValorInput
    atualizarValorInputProps: atualizarValorInput,
    atualizarValorPlanetProps: atualizarValorPlanet
}, dispatch);

// export default connect(mapStateToProps)(App);
// INSERIDO 2
export default connect(mapStateToProps, mapDispatchToProps)(App);

/**

Criamos o método mapDispatchToProps para converter a Action Creator clickButton que criamos no arquivo src/actions/index.js em uma prop para o componente. O método bindActionCreators facilita este trabalho. Ao clicar no botão Click me!, o valor do state inputValue que foi alterado pelo input text é enviado à Store pelo método clickButton, que foi mapeado no componente como prop.

Por fim, passamos o método mapDispatchToProps como segundo parâmetro do método connect. Agora é só testar!

É importante lembrar que há diversas formas de se disparar eventos à Store, eu abordarei algumas delas em um futuro artigo.

*/





#############
PAGINA E COMPONENTE EXTRA
#############

/**
src/pages/Planet.js

VAMOS CRIAR AGORA UM COMPONENTE PARA SER CARREGADO DENTRO DO src/index.js

*/

// import React from 'react';
import React from 'react';
import '../style/Planet.scss';
/**
 LIB USADA
 https://freefrontend.com/css-tables/
 https://codepen.io/FlorinPop17/pen/WmNoJx
 
 */
/**

planetProps:{
    climate: "temperate"
    created: "2014-12-20T17:50:47.864000Z"
    diameter: "unknown"
    edited: "2014-12-20T20:58:18.517000Z"
    films: []
    gravity: "1"
    name: "Skako"
    orbital_period: "384"
    population: "500000000000"
    residents: ["https://swapi.co/api/people/76/"]
    rotation_period: "27"
    surface_water: "unknown"
    terrain: "urban, vines"
    url: "https://swapi.co/api/planets/56/"
}

*/

// function Planet(props) {
    const Planet = (props) => {
        console.log("a")
        console.log(props.planetProps.name, props.atualizarValorPlaneta)
        console.log("b")
    
    
        return (
            <div className="App">
    
                <div className="pricing-box-container">
    
                    <div className="pricing-box pricing-box-bg-image text-center">
                        <h1 className="text-center">{props.planetProps.name}</h1>
                        
                        <ul className="features-list">
                            <li><strong>Population: </strong> {props.planetProps.population}</li>
                            <li><strong>Climate: </strong>{props.planetProps.climate}</li>
                            <li><strong>Terrain: </strong> {props.planetProps.terrain}</li>
                            <li><strong>Featured in </strong> {props.planetProps.films.length?props.planetProps.films.length:0} films</li>
                        </ul>
                        <button className="btn-primary" onClick={props.atualizarValorPlaneta}>Next</button>
                    </div>
    
                </div>
    
                {/* <footer>
                    <p>
                        Created with <i className="fa fa-heart"></i> by
                        <a target="_blank" href="https://florin-pop.com">Florin Pop</a>
                        - Read about how I created it
                        <a target="_blank" href="https://www.florin-pop.com/blog/2019/02/how-to-create-pricing-plans/">in this article</a><br />
                        Other projects on
                        <a target="_blank" href="https://github.com/florinpop17/work-journal/">Github</a>
                    </p>
                </footer> */}
    
            </div>
        );
    }
    
    export default Planet;


--

#############
CUSTOMIZANDO
#############

/**

src/style/Planet.scss

*/

// import React from 'react';
import React from 'react';
import '../style/Planet.scss';
/**
 LIB USADA
 https://freefrontend.com/css-tables/
 https://codepen.io/FlorinPop17/pen/WmNoJx
 
 */
/**

planetProps:{
    climate: "temperate"
    created: "2014-12-20T17:50:47.864000Z"
    diameter: "unknown"
    edited: "2014-12-20T20:58:18.517000Z"
    films: []
    gravity: "1"
    name: "Skako"
    orbital_period: "384"
    population: "500000000000"
    residents: ["https://swapi.co/api/people/76/"]
    rotation_period: "27"
    surface_water: "unknown"
    terrain: "urban, vines"
    url: "https://swapi.co/api/planets/56/"
}

*/

function Planet(res) {
    console.log("a")
    console.log(res.planetProps.name)
    console.log("a")
    return (
        <div className="App">

            <div className="pricing-box-container">

                <div className="pricing-box pricing-box-bg-image text-center">
                    <h1 className="text-center">{res.planetProps.name}</h1>
                    
                    <ul className="features-list">
                        <li><strong>Population: </strong> {res.planetProps.population}</li>
                        <li><strong>Climate: </strong>{res.planetProps.climate}</li>
                        <li><strong>Terrain: </strong> {res.planetProps.terrain}</li>
                        <li><strong>Featured in </strong> {res.planetProps.films.length?res.planetProps.films.length:0} films</li>
                    </ul>
                    <button className="btn-primary">Next</button>
                </div>

            </div>

            {/* <footer>
                <p>
                    Created with <i className="fa fa-heart"></i> by
                    <a target="_blank" href="https://florin-pop.com">Florin Pop</a>
                    - Read about how I created it
                    <a target="_blank" href="https://www.florin-pop.com/blog/2019/02/how-to-create-pricing-plans/">in this article</a><br />
                    Other projects on
                    <a target="_blank" href="https://github.com/florinpop17/work-journal/">Github</a>
                </p>
            </footer> */}


        </div>
    );
}

export default Planet;



*******************************************************


#############
AXIOS
#############


#############
INSTALLING THE AXIOS CLIENT
#############

/**

AXIOS IS A MODERN AND PROMISE-BASED JAVASCRIPT HTTP CLIENT LIBRARY THAT CAN BE USED BOTH IN THE BROWSER and the server with Node.js. Axios works asynchronously and allows you to make HTTP calls to REST endpoints and consume JSON REST APIs.

Now let's install Axios in our React project using the following command from your project's root folder:

*/

npm install --save axios



#############
CONSUMING THE REST API WITH AXIOS
#############

/**

Now let's see how we can consume JSON data from our third-party API endpoint using the Axios client.

Open the src/App.js file and import the axios library, define the API_URL that holds the URL of our third-party REST API and add a state variable that will be used to hold users after getting them from the REST API:

*/

npm install --save axios

git commit -m "Adicionado o componente Planet e instalado o axios"



























